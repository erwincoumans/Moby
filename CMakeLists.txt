# setup some things initially
cmake_minimum_required (VERSION 2.6)
project (Moby)
include (CheckIncludeFiles)
include (CheckLibraryExists)
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/CMakeModules)

# setup include directories
include_directories ("include")

# setup library sources
set (SOURCES AABB.cpp AAngle.cpp ArticulatedBody.cpp BV.cpp Base.cpp BoundingSphere.cpp BoxPrimitive.cpp cblas.cpp C2ACCD.cpp CRBAlgorithm.cpp CSG.cpp CollisionDetection.cpp CollisionGeometry.cpp CompGeom.cpp ConePrimitive.cpp ContactParameters.cpp CylinderPrimitive.cpp DampingForce.cpp DeformableBody.cpp DeformableCCD.cpp DynamicBody.cpp Event.cpp EventDrivenSimulator.cpp FSABAlgorithm.cpp FixedJoint.cpp GeneralizedCCD.cpp GravityForce.cpp ImpactEventHandler.cpp IndexedTetraArray.cpp IndexedTriArray.cpp Integrator.cpp Joint.cpp LinAlg.cpp Log.cpp MCArticulatedBody.cpp Matrix2.cpp Matrix3.cpp Matrix4.cpp MatrixN.cpp MeshDCD.cpp OBB.cpp Octree.cpp ODEPACKIntegrator.cpp Optimization.cpp PSDeformableBody.cpp Polyhedron.cpp Primitive.cpp PrismaticJoint.cpp  Quat.cpp RCArticulatedBody.cpp RNEAlgorithm.cpp RevoluteJoint.cpp RigidBody.cpp SMatrix6N.cpp SQP.cpp SSL.cpp SSR.cpp SVector6.cpp Simulator.cpp SparseMatrixN.cpp SparseVectorN.cpp SpatialABInertia.cpp SpatialRBInertia.cpp SpatialTransform.cpp SpherePrimitive.cpp SphericalJoint.cpp StokesDragForce.cpp Tetrahedron.cpp ThickTriangle.cpp Triangle.cpp TriangleMeshPrimitive.cpp UniversalJoint.cpp Vector2.cpp Vector3.cpp VectorN.cpp Visualizable.cpp XMLReader.cpp XMLTree.cpp XMLWriter.cpp)
set (APSOURCES blas-ap.cpp f2c-ap.cpp lapack-ap.cpp mpreal.cpp)

# build options 
option (BUILD_SHARED_LIBS "Build Moby as a shared library?" ON)
option (BUILD_TOOLS "Build the programs in the tools subdirectory?" ON)
option (USE_OSG "Build against OpenSceneGraph library?" ON)
option (USE_PATH "Build against the PATH library?" OFF)
option (PROFILE "Build for profiling?" OFF)
option (OMP "Build with OpenMP support?" OFF)
option (ARBITRARY_PRECISION "Build with arbitrary precision?" OFF)
option (THREADSAFE "Build Moby to be threadsafe? (slower)" OFF)
option (BUILD_DOUBLE "Build with real type as double?" ON)

# check options are valid
if (THREADSAFE)
  if (OMP)
    unset (OMP)
  endif (OMP)
  if (ARBITRARY_PRECISION)
    unset (ARBITRARY_PRECISION)
  endif (ARBITRARY_PRECISION)
endif (THREADSAFE)

# modify C++ flags
if (ARBITRARY_PRECISION)
  find_package (MPFR)
  if (not MPFR_FOUND)
    unset (ARBITRARY_PRECISION)
  else (not MPFR_FOUND)
    include_directories (${MPFR_INCLUDES})
    add_definitions (-DBUILD_ARBITRARY_PRECISION)
    set (SOURCES ${SOURCES} ${APSOURCES})
  endif (not MPFR_FOUND)
else (ARBITRARY_PRECISION)
  if (BUILD_DOUBLE)
    add_definitions (-DBUILD_DOUBLE)
  else (BUILD_DOUBLE)
    add_definitions (-DBUILD_SINGLE)
  endif (BUILD_DOUBLE)
endif (ARBITRARY_PRECISION)
if (THREADSAFE)
  add_definitions (-DSAFESTATIC=)
  add_definitions (-DTHREADSAFE)
else (THREADSAFE)
  add_definitions (-DSAFESTATIC=static)
endif (THREADSAFE)
if (OMP)
  find_package (OpenMP REQUIRED)
  include_directories (${OPENMP_INCLUDE_DIRS})
  set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS})
#  set (CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG} ${OpenMP_CXX_FLAGS})
#  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${OpenMP_CXX_FLAGS})
#  set (CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} ${OpenMP_CXX_FLAGS})
#  set (CMAKE_CXX_FLAGS_RELEASE ${OpenMP_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE})
#  set (CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL} ${OpenMP_CXX_FLAGS})
endif (OMP)
if (PROFILE)
  set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-pg -g")
  set (CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG} "-pg -g")
  set (CMAKE_CXX_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE} "-pg -g")
  set (CMAKE_CXX_FLAGS_RELDEB ${CMAKE_C_FLAGS_RELDEB} "pg -g")
  set (CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_C_FLAGS_MINSIZEREL} "pg -g")
endif (PROFILE)

# find libraries
find_package (LibXml2 REQUIRED)
find_package (GLPK)
find_package (Boost REQUIRED)
get_property(_LANGUAGES_ GLOBAL PROPERTY ENABLED_LANGUAGES)
if (APPLE)
  find_package (BLAS REQUIRED)
  find_package (LAPACK REQUIRED)
else (APPLE)
  find_package (CBLAS REQUIRED)
  find_package (LAPACKLite REQUIRED)
  set (BLAS_LIBRARIES ${CBLAS_LIBRARIES})
endif (APPLE)
find_package (QHULL REQUIRED)
find_package (osg)
find_package (osgViewer)
find_package (osgDB)
find_package (osgGA)
find_package (OpenThreads)

# setup OSG includes and additional sources
if (OSG_FOUND)
  if (OSGDB_FOUND)
    if (OSGVIEWER_FOUND)
      if (OPENTHREADS_FOUND)
        include_directories (${OSG_INCLUDE_DIR})
        include_directories (${OSGDB_INCLUDE_DIR})
        include_directories (${OSGGA_INCLUDE_DIR})
        include_directories (${OSGVIEWER_INCLUDE_DIR})
        include_directories (${OPENTHREADS_INCLUDE_DIR})
        add_definitions (-DUSE_OSG)
        set (SOURCES ${SOURCES} OSGGroupWrapper.cpp)
      else (OPENTHREADS_FOUND)
        unset (OSG_FOUND)
      endif (OPENTHREADS_FOUND)
    else (OSGVIEWER_FOUND)
      unset (OSG_FOUND)
    endif (OSGVIEWER_FOUND)
  else (OSGDB_FOUND)
    unset (OSG_FOUND)
  endif (OSGDB_FOUND)
endif (OSG_FOUND)  

# setup include directories, compiler flags, and libraries for optional pkgs
if (LIBXML2_FOUND)
  set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${LIBXML2_DEFINITIONS})
  set (CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG} ${LIBXML2_DEFINITIONS})
  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${LIBXML2_DEFINITIONS})
  set (CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} ${LIBXML2_DEFINITIONS})
  set (CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL} ${LIBXML2_DEFINITIONS})
  add_definitions (-DUSE_LIBXML2)
  include_directories (${LIBXML2_INCLUDE_DIR})
endif (LIBXML2_FOUND)
if (GLPK_FOUND)
  add_definitions (-DUSE_GLPK)
  include_directories (${GLPK_INCLUDE_DIRS})
endif (GLPK_FOUND)

# setup include directories, compiler flags, and libraries for required pkgs
include_directories (${BOOST_INCLUDE_DIRS})
include_directories (${QHULL_INCLUDE_DIRS})

# configure checks: optional libraries
#if (USE_PATH)
#  unset (USE_PATH CACHE)
#  CHECK_LIBRARY_EXISTS(path46 MCP_SetInterface "" USE_PATH)
#endif (USE_PATH)
CHECK_LIBRARY_EXISTS(odepack dlsode_ "" HAVE_ODEPACK)

# setup necessary library list
set (REQLIBS qhull)

# build against PATH?
if (USE_PATH)
  add_definitions (-DUSE_PATH)
  set (EXTRA_LIBS ${EXTRA_LIBS} path46)
  set (SOURCES ${SOURCES} PathLCPSolver.cpp)
endif (USE_PATH)

# build against ODEPACK?
if (HAVE_ODEPACK)
  add_definitions (-DUSE_ODEPACK)
  set (EXTRA_LIBS ${EXTRA_LIBS} odepack)
endif (HAVE_ODEPACK)

# prepend "src/" to each source file
foreach (i ${SOURCES})
  set (LIBSOURCES ${LIBSOURCES} "${CMAKE_SOURCE_DIR}/src/${i}")
endforeach (i)

# create the library
add_library(Moby "" "" ${LIBSOURCES})
target_link_libraries (Moby ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES} ${QHULL_LIBRARIES} ${EXTRA_LIBS})

# link optional libraries
if (ARBITRARY_PRECISION)
  target_link_libraries (Moby ${MPFR_LIBRARIES})
endif (ARBITRARY_PRECISION)
if (OMP)
  target_link_libraries (Moby ${OPENMP_LIBRARIES})
endif (OMP)
if (LIBXML2_FOUND)
  target_link_libraries (Moby ${LIBXML2_LIBRARIES})
endif (LIBXML2_FOUND)
if (GLPK_FOUND)
  target_link_libraries (Moby ${GLPK_LIBRARIES})
endif (GLPK_FOUND)
if (OSG_FOUND)
  target_link_libraries (Moby ${OSG_LIBRARIES})
  target_link_libraries (Moby ${OSGVIEWER_LIBRARIES})
  target_link_libraries (Moby ${OSGDB_LIBRARIES})
  target_link_libraries (Moby ${OSGGA_LIBRARIES})
  target_link_libraries (Moby ${OPENTHREADS_LIBRARY})
endif (OSG_FOUND)  

# build the tools?
if (BUILD_TOOLS)
  add_executable(moby-driver example/driver.cpp)
  if (OSG_FOUND)
    add_executable(moby-view example/view.cpp)
  endif (OSG_FOUND)

  # plugins
#  add_library(controller "MODULE" example/bouncing-sphere/controller.cpp)
  add_library(grasp-controller "MODULE" example/banditII/grasp-controller.cpp)
  add_library(bandit-controller "MODULE" example/banditII/bandit-controller.cpp)
  add_library(noball-controller "MODULE" example/banditII/noball-controller.cpp)

  # tools
  add_executable(moby-conv-decomp example/conv-decomp.cpp)
  add_executable(moby-convexify example/convexify.cpp)
  add_executable(moby-output-symbolic example/output-symbolic.cpp)
  add_executable(moby-adjust-center example/adjust-center.cpp)
  add_executable(moby-center example/center.cpp)
  target_link_libraries(moby-driver Moby)
  if (OSG_FOUND)
    target_link_libraries(moby-view ${OSG_LIBRARIES})
    target_link_libraries(moby-view ${OSGVIEWER_LIBRARIES})
    target_link_libraries(moby-view ${OSGDB_LIBRARIES})
    target_link_libraries(moby-view ${OSGGA_LIBRARIES})
    target_link_libraries(moby-view ${OPENTHREADS_LIBRARIES})
  endif (OSG_FOUND)

  # uncomment to build example plugins
#  target_link_libraries(controller Moby)
  target_link_libraries(grasp-controller Moby)
  target_link_libraries(bandit-controller Moby)
  target_link_libraries(noball-controller Moby)

  # tools
  target_link_libraries(moby-conv-decomp Moby)
  target_link_libraries(moby-convexify Moby)
  target_link_libraries(moby-output-symbolic Moby)
  target_link_libraries(moby-adjust-center Moby)
  target_link_libraries(moby-center Moby)
endif (BUILD_TOOLS)

# setup install locations
install (TARGETS Moby DESTINATION lib)
install (TARGETS moby-driver DESTINATION bin)
if (OSG_FOUND)
  install (TARGETS moby-view DESTINATION bin)
endif (OSG_FOUND)
install (TARGETS moby-conv-decomp DESTINATION bin)
install (TARGETS moby-convexify DESTINATION bin)
install (TARGETS moby-adjust-center DESTINATION bin)
install (TARGETS moby-center DESTINATION bin)
install (DIRECTORY ${CMAKE_SOURCE_DIR}/include/Moby DESTINATION include)

